"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,k=u["".concat(o,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(k,l(l({ref:t},p),{},{components:n})):r.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[u]="string"==typeof e?e:i,l[1]=c;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={},l="\u6d4b\u8bd5\u5e93",c={unversionedId:"rfcs/lib-ctest",id:"rfcs/lib-ctest",title:"\u6d4b\u8bd5\u5e93",description:"- \u5f00\u59cb\u65e5\u671f\uff1a2023-06-03",source:"@site/docs/rfcs/0014-lib-ctest.md",sourceDirName:"rfcs",slug:"/rfcs/lib-ctest",permalink:"/docs/next/rfcs/lib-ctest",draft:!1,editUrl:"https://github.com/lcui-dev/website/tree/main/docs/docs/rfcs/0014-lib-ctest.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{},sidebar:"rfcSidebar",previous:{title:"\u5e73\u53f0\u5e93",permalink:"/docs/next/rfcs/lib-platform"}},o={},s=[{value:"\u6982\u62ec",id:"\u6982\u62ec",level:2},{value:"\u57fa\u672c\u793a\u4f8b",id:"\u57fa\u672c\u793a\u4f8b",level:2},{value:"\u52a8\u673a",id:"\u52a8\u673a",level:2},{value:"\u8be6\u7ec6\u8bbe\u8ba1",id:"\u8be6\u7ec6\u8bbe\u8ba1",level:2},{value:"\u8c03\u6574\u547d\u540d",id:"\u8c03\u6574\u547d\u540d",level:3},{value:"\u63d0\u5347\u6269\u5c55\u6027",id:"\u63d0\u5347\u6269\u5c55\u6027",level:3},{value:"\u51cf\u5c11\u4f9d\u8d56",id:"\u51cf\u5c11\u4f9d\u8d56",level:3},{value:"\u7f3a\u70b9",id:"\u7f3a\u70b9",level:2},{value:"\u5907\u9009\u65b9\u6848",id:"\u5907\u9009\u65b9\u6848",level:2},{value:"\u91c7\u7528\u7b56\u7565",id:"\u91c7\u7528\u7b56\u7565",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6d4b\u8bd5\u5e93"},"\u6d4b\u8bd5\u5e93"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5f00\u59cb\u65e5\u671f\uff1a2023-06-03"),(0,i.kt)("li",{parentName:"ul"},"\u76ee\u6807\u4e3b\u8981\u7248\u672c\uff1a3.x"),(0,i.kt)("li",{parentName:"ul"},"\u53c2\u8003\u95ee\u9898\uff1a\u65e0"),(0,i.kt)("li",{parentName:"ul"},"\u5b9e\u73b0 PR\uff1a\u65e0")),(0,i.kt)("h2",{id:"\u6982\u62ec"},"\u6982\u62ec"),(0,i.kt)("p",null,"\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u5e93\uff0c\u7528\u4e8e\u7edf\u8ba1\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u7ed3\u679c\u548c\u8017\u65f6\uff0c\u4ee5\u53cb\u597d\u7684\u683c\u5f0f\u8f93\u51fa\u6d4b\u8bd5\u7ed3\u679c\u3002"),(0,i.kt)("h2",{id:"\u57fa\u672c\u793a\u4f8b"},"\u57fa\u672c\u793a\u4f8b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <ctest.h>\n\nvoid test_stdio(void)\n{\n    int num = 0;\n\n    ctest_equal_int("the string \\"100\\" should be converted to 100",\n                    sscanf("100", "%d", &num), 100);\n}\n\nint main(void)\n{\n    ctest_describe("stdio.h", test_stdio);\n    return ctest_finish();\n}\n')),(0,i.kt)("p",null,"\u8fd0\u884c\u540e\u8f93\u51fa\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-terminal"},'  stdio.h\n    \u2713 the string "100" should be converted to 100\n\n  1 passing (0ms)\n')),(0,i.kt)("h2",{id:"\u52a8\u673a"},"\u52a8\u673a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u547d\u540d\u89c4\u8303\u5316\uff1a")," ",(0,i.kt)("inlineCode",{parentName:"li"},"describe()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"print_test_result()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"it_i()")," \u547d\u540d\u6bd4\u8f83\u968f\u610f\uff0c\u4e0d\u592a\u5bb9\u6613\u770b\u51fa\u5b83\u4eec\u540c\u5c5e\u4e00\u4e2a\u5e93\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u51cf\u5c11\u4f9d\u8d56\uff1a")," ctest \u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"it_rectf()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"it_rect()")," \u7b49\u51fd\u6570\u4f9d\u8d56\u56fe\u5f62\u5e93\u548c UI \u5e93\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5176\u5b83\u7528\u5230 ctest \u7684\u5e93\u4f1a\u56e0\u6b64\u4f9d\u8d56\u8fd9\u4e9b\u5e93\u3002"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"\u9002\u5e94\u66f4\u591a\u7684\u6570\u636e\u7c7b\u578b\uff1a")," \u5185\u7f6e\u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"it_s()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"it_b()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"li"},"it_i()")," \u4e0d\u591f\u7528\uff0c\u800c\u4e14\u5b83\u4eec\u7684\u5927\u90e8\u5206\u5b9e\u73b0\u4ee3\u7801\u662f\u4e00\u6837\u7684\uff0c\u5e94\u8be5\u4f18\u5316\u3002")),(0,i.kt)("h2",{id:"\u8be6\u7ec6\u8bbe\u8ba1"},"\u8be6\u7ec6\u8bbe\u8ba1"),(0,i.kt)("h3",{id:"\u8c03\u6574\u547d\u540d"},"\u8c03\u6574\u547d\u540d"),(0,i.kt)("p",null,"\u547d\u540d\u90fd\u4ee5 ",(0,i.kt)("inlineCode",{parentName:"p"},"ctest_")," \u5f00\u5934\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"it_"),"\u5f00\u5934\u7684\u6d4b\u8bd5\u51fd\u6570\u6539\u4e3a\u4ee5 ",(0,i.kt)("inlineCode",{parentName:"p"},"ctest_equal_")," \u5f00\u5934\uff0c\u5e76\u5c06 s\u3001i\u3001b \u6539\u4e3a\u66f4\u5b8c\u6574\u7684\u5355\u8bcd\uff1astr\u3001int\u3001bool\u3002"),(0,i.kt)("h3",{id:"\u63d0\u5347\u6269\u5c55\u6027"},"\u63d0\u5347\u6269\u5c55\u6027"),(0,i.kt)("p",null,"\u65b0\u589e ",(0,i.kt)("inlineCode",{parentName:"p"},"ctest_equal()")," \u51fd\u6570\uff0c\u63a5\u6536\u5b57\u7b26\u4e32\u8f6c\u6362\u51fd\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},"to_str")," \u548c\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u6307\u9488\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"bool ctest_equal(const char *name, int (*to_str)(void *, char *, unsigned),\n         void *actual, void *expected);\n")),(0,i.kt)("p",null,"\u539f\u6709\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"it_s()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"it_int()")," \u7b49\u51fd\u6570\u6539\u4e3a\u57fa\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"ctest_equal()")," \u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'int ctest_int_to_str(void *data, char *str, unsigned max_len)\n{\n    return snprintf(str, max_len, "%d", *(int *)data);\n}\n\nbool ctest_euqal_int(const char *name, int actual, int expected)\n{\n    return ctest_equal(name, ctest_int_to_str, &actual, &expected);\n}\n\n')),(0,i.kt)("h3",{id:"\u51cf\u5c11\u4f9d\u8d56"},"\u51cf\u5c11\u4f9d\u8d56"),(0,i.kt)("p",null,"\u5185\u90e8\u79fb\u9664 ",(0,i.kt)("inlineCode",{parentName:"p"},"it_rect()"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"it_rectf()"),"\uff0c\u7531 UI \u5e93\u548c\u56fe\u5f62\u5e93\u5185\u90e8\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u503c\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u4f8b\u5982\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'int ui_rect_to_str(ui_rect_t *rect, char *str, unsigned max_len)\n{\n        return snprintf(str, max_len, "(%g, %g, %g, %g)", rect->x, rect->y,\n                        rect->width, rect->height);\n}\n\nstatic inline bool ctest_euqal_ui_rect(const char *name, ui_rect_t *actual,\n                       ui_rect_t *expected)\n{\n    return ctest_equal(name, (ctest_to_str_func_t)ui_rect_to_str, actual, expected);\n}\n')),(0,i.kt)("h2",{id:"\u7f3a\u70b9"},"\u7f3a\u70b9"),(0,i.kt)("p",null,"\u65e0\u3002"),(0,i.kt)("h2",{id:"\u5907\u9009\u65b9\u6848"},"\u5907\u9009\u65b9\u6848"),(0,i.kt)("p",null,"\u65e0\u3002"),(0,i.kt)("h2",{id:"\u91c7\u7528\u7b56\u7565"},"\u91c7\u7528\u7b56\u7565"),(0,i.kt)("p",null,"\u5168\u5c40\u66ff\u6362\u3002"))}d.isMDXComponent=!0}}]);