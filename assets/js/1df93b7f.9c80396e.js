"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4583],{8125:(e,t,n)=>{n.d(t,{A:()=>i});var s=n(7107),a=n(6784);n(484);s.$W.autoAddCss=!1;const i=a.g},7306:(e,t,n)=>{n.d(t,{A:()=>d});var s=n(53),a=(n(6540),n(6188)),i=n(7897),r=n(8125);const l={window:"window_WmwH","window-header":"window-header_Fjqy","window-content":"window-content_miPl","window-buttons":"window-buttons_NWJo","window-button":"window-button_oDy6","window-close":"window-close_NXUe"};var o=n(4848);function d(e){let{className:t,icon:n,title:d="LCUI Display",children:c,...u}=e;return(0,o.jsxs)("div",{className:(0,s.A)(t,l.window,"shadow--md"),...u,children:[(0,o.jsxs)("div",{className:l["window-header"],children:[n,d,(0,o.jsxs)("div",{className:l["window-buttons"],children:[(0,o.jsx)("div",{className:l["window-button"],children:(0,o.jsx)(r.A,{icon:a.EZy})}),(0,o.jsx)("div",{className:l["window-button"],children:(0,o.jsx)(r.A,{icon:i.Nfw})}),(0,o.jsx)("div",{className:(0,s.A)(l["window-button"],l["window-close"]),children:(0,o.jsx)(r.A,{icon:a.yYc})})]})]}),(0,o.jsx)("div",{className:l["window-content"],children:c})]})}},8940:(e,t,n)=>{n.r(t),n.d(t,{default:()=>ne});var s=n(6540),a=n(53),i=n(5122),r=n(8125),l=n(6188),o=n(8957),d=n(6930);const c={features:"features_t9lD",feature:"feature_CLW0",card:"card_L8bV"};var u=n(4848);function m(){const e=[[(0,i.T)({id:"home.features.ui.title",message:"Portable UI library"}),(0,i.T)({id:"home.features.ui.description",message:"UI library has few dependencies and no system API dependencies."})],[(0,i.T)({id:"home.features.gl.title",message:"Small Graphics Library"}),(0,i.T)({id:"home.features.gl.description",message:"Provide basic graphics processing capabilities for UI rendering."})],[(0,i.T)({id:"home.features.plat.title",message:"Platform APIs"}),(0,i.T)({id:"home.features.plat.description",message:"Provide platform related APIs, such as window management, message loop, clipboard, etc."})],[(0,i.T)({id:"home.features.router.title",message:"Router"}),(0,i.T)({id:"home.features.router.description",message:"define routes, map them to widgets, and display the appropriate widget based on the URL."})],[(0,i.T)({id:"home.features.i18n.title",message:"I18n"}),(0,i.T)({id:"home.features.i18n.description",message:"Configure translated text in multiple languages and freely switch languages at runtime."})],[(0,i.T)({id:"home.features.window.title",message:"Window Mapping"}),(0,i.T)({id:"home.features.window.description",message:"Map widget to the system window so that its content can be synchronized to the window."})],[(0,i.T)({id:"home.features.ui_widgets.title",message:"Preset Widgets"}),(0,i.T)({id:"home.features.ui_widgets.description",message:"Text, TextEdit, Button, ScrollBar, etc."})],[(0,i.T)({id:"home.features.css.title",message:"CSS Support"}),(0,i.T)({id:"home.features.css.description",message:"Parse CSS, select styles, and calculate styles."})],[(0,i.T)({id:"home.features.xml.title",message:"XML Support"}),(0,i.T)({id:"home.features.xml.description",message:"Declare User Interface with XML."})]];return(0,u.jsx)("section",{children:(0,u.jsxs)("div",{className:"container",children:[(0,u.jsx)("h2",{className:"text--center",children:(0,i.T)({id:"home.features.title",message:"What's in LCUI?"})}),(0,u.jsx)("p",{className:"text--center description margin-bottom--lg",children:(0,i.T)({id:"home.features.description",message:"The libraries you need to make the UI."})}),(0,u.jsx)("div",{className:c.features,children:e.map((e=>{let[t,n]=e;return(0,u.jsx)("div",{className:c.feature,children:(0,u.jsxs)("div",{className:c.card,children:[(0,u.jsx)("h3",{children:t}),(0,u.jsx)("div",{className:"text--muted",children:n})]})},t)}))})]})})}var p=n(8215),_=n(4319),h=n(6347),g=n(4280),w=n(3024),f=n(8417),k=n(4031);function x(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function b(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return x(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:a}}=e;return{value:t,label:n,attributes:s,default:a}}))}(n);return function(e){const t=(0,f.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function v(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function j(e){let{queryString:t=!1,groupId:n}=e;const a=(0,h.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,w.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=b(e),[r,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!v({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:i}))),[o,d]=j({queryString:n,groupId:a}),[c,u]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,k.Dv)(n);return[a,(0,s.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),m=(()=>{const e=o??c;return v({value:e,tabValues:i})?e:null})();(0,g.A)((()=>{m&&l(m)}),[m]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!v({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),u(e)}),[d,u,i]),tabValues:i}}var N=n(6916);const L={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function T(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:i}=e;const r=[],{blockElementScrollPositionUntilNextRender:l}=(0,_.a_)(),o=e=>{const t=e.currentTarget,n=r.indexOf(t),o=i[n].value;o!==s&&(l(t),a(o))},d=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const n=r.indexOf(e.currentTarget)+1;t=r[n]??r[0];break}case"ArrowLeft":{const n=r.indexOf(e.currentTarget)-1;t=r[n]??r[r.length-1];break}}t?.focus()};return(0,u.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,u.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>r.push(e),onKeyDown:d,onClick:o,...a,className:(0,p.A)("tabs__item",L.tabItem,a?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function C(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,p.A)("margin-top--md",e.props.className)}):null}return(0,u.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function I(e){const t=y(e);return(0,u.jsxs)("div",{className:(0,p.A)("tabs-container",L.tabList),children:[(0,u.jsx)(T,{...t,...e}),(0,u.jsx)(C,{...t,...e})]})}function A(e){const t=(0,N.A)();return(0,u.jsx)(I,{...e,children:x(e.children)},String(t))}const U={tabItem:"tabItem_Ymn6"};function q(e){let{children:t,hidden:n,className:s}=e;return(0,u.jsx)("div",{role:"tabpanel",className:(0,p.A)(U.tabItem,s),hidden:n,children:t})}var S=n(1986);const E='#include <LCUI.h>\n#include <LCUI/main.h>\n\nint main(int argc, char **argv)\n{\n        ui_widget_t *pack;\n\n        lcui_init();\n        pack = ui_load_xml_file("todolist.xml");\n        if (!pack) {\n                return -1;\n        }\n        ui_root_append(pack);\n        ui_widget_unwrap(pack);\n        ui_widget_set_title(ui_root(), L"Todo list");\n        return lcui_main();\n}\n',V='<?xml version="1.0" encoding="UTF-8" ?>\n<lcui-app>\n  <resource type="text/css" src="todolist.css"/>\n  <ui>\n    <w class="task-item is-completed">\n      <w class="task-status" />\n      <text class="task-name">Download LCUI source code</text>\n      <w class="task-delete" />\n    </w>\n    <w class="task-item is-completed">\n      <w class="task-status" />\n      <text class="task-name">Build LCUI</text>\n      <w class="task-delete" />\n    </w>\n    <w class="task-item">\n      <w class="task-status" />\n      <text class="task-name">Read LCUI tutorials</text>\n      <w class="task-delete" />\n    </w>\n    <w class="task-item">\n      <w class="task-status" />\n      <text class="task-name">Create my LCUI application</text>\n      <w class="task-delete" />\n    </w>\n  </ui>\n</lcui-app>\n',D='.task-item:last-child {\n  border-bottom: 0;\n}\n\n.task-item:hover {\n  background-color: #f6fbff;\n}\n\n.task-item.is-completed {\n  background-color: rgba(74, 206, 163, 0.1);\n}\n\n.task-status {\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n  border: 2px solid #bbbdc7;\n  border-radius: 9px;\n  background-color: #fff;\n  background-image: url("check.png");\n  background-size: 100%;\n  margin-right: 10px;\n  flex: none;\n  text-align: center;\n}\n\n.task-item.is-completed .task-status {\n  color: #fff;\n  background-color: #4acea3;\n  border-color: #38bb90;\n}\n\n.task-name {\n  flex: 1;\n}\n\n.task-delete {\n  width: 18px;\n  height: 18px;\n  display: none;\n  flex: none;\n  background-size: 100%;\n  background-image: url("delete.png");\n}\n\n.task-item:hover .task-delete {\n  display: block;\n}\n';var B=n(7306);const P={editor:"editor_rxp1"};function R(e){let{className:t,...n}=e;return(0,u.jsx)("div",{className:(0,a.A)(t,P.editor),...n})}const z="pack_G02s",M="editor_F_9b",W="output__gTb",$="box_prTd";const F=function(e){let{highlightMap:t,editorContent:n,windowTitle:i,windowContent:r}=e;const l=(0,s.useRef)(),[o,d]=(0,s.useState)(!1),[c,m]=(0,s.useState)({});return(0,s.useEffect)((()=>{function e(e){return e&&Array.from(e.parentElement.children).findIndex((t=>t===e))}function n(n){let s;const a=l.current.querySelector(".example-preview");for(d(!1),s=n.target;s&&!s.classList.contains("token-line");s=s.parentElement);if(!l.current||!s)return;const i=e(s),r=e(function(e){for(let t=e;t;t=t.parentElement)if("tabpanel"===t.getAttribute("role"))return t;return null}(s)),o=t?.[r]?.[i+1],c=o?function(e,t){const n=t.split(" ").reduce(((e,t)=>{const[n,s]=t.split(":");if(s&&s.startsWith("eq(")){const t=s.substring(3,s.length-1);return e.querySelectorAll(n)[t]}return e.querySelector(n)}),e);return n!==e?n:null}(a,o):null;if(c){const e=1,t=a.getBoundingClientRect(),{left:n,top:s,width:i,height:r}=c.getBoundingClientRect();m({left:n-t.left-e,top:s-t.top-e,width:i,height:r}),d(!0)}}return l.current?.addEventListener("mousemove",n),()=>l.current?.removeEventListener("mousemove",n)}),[l]),(0,u.jsxs)("div",{ref:l,className:z,children:[(0,u.jsx)("div",{className:M,children:(0,u.jsx)(R,{children:n})}),(0,u.jsxs)(B.A,{title:i,className:(0,a.A)(W,"example-preview"),children:[r,o&&(0,u.jsx)("div",{className:$,style:c})]})]})},Y={root:"root_jkPT"};function O(e){let{onCreate:t}=e;const[n,a]=(0,s.useState)("");return(0,u.jsx)("input",{type:"text",className:"task-input",placeholder:"Add a new task...",value:n,onChange:e=>{let{target:t}=e;return a(t.value)},onKeyDown:e=>{"Enter"===e.key&&(t(n),a(""))}})}function X(e){let{item:t,onToggle:n,onDelete:s}=e;return(0,u.jsxs)("div",{className:(0,a.A)("task-item","completed"===t.status&&"is-completed"),children:[(0,u.jsx)("div",{className:"task-status",onClick:n}),(0,u.jsx)("div",{className:"task-name",children:t.name}),(0,u.jsx)("div",{className:"task-delete",onClick:s})]})}function G(e){let{className:t}=e;const n=(0,s.useRef)(0),[i,r]=(0,s.useState)("all"),[l,o]=(0,s.useState)([{id:n.current++,name:"Download LCUI source code",status:"completed"},{id:n.current++,name:"Build LCUI",status:"completed"},{id:n.current++,name:"Read LCUI tutorials",status:"active"},{id:n.current++,name:"Create my LCUI application",status:"active"}]);return(0,u.jsx)("div",{className:(0,a.A)(Y.root,t),children:(0,u.jsxs)("div",{className:"app",children:[(0,u.jsxs)("div",{className:"header",children:[(0,u.jsx)("div",{className:"title",children:"Todo list"}),(0,u.jsxs)("div",{className:"tools",children:[(0,u.jsxs)("div",{className:"count",children:[l.length," ",l.length>1?"tasks":"task"]}),(0,u.jsx)("div",{className:"task-filters",children:["all","active","completed"].map((e=>(0,u.jsx)("div",{className:(0,a.A)("task-filter",e===i&&"is-active"),onClick:()=>r(e),children:e},e)))})]})]}),(0,u.jsx)(O,{onCreate:e=>{o([...l,{name:e,id:n.current++,status:"active"}])}}),(0,u.jsx)("div",{className:"task-list",children:l.filter((e=>"all"===i||e.status===i)).map((e=>(0,u.jsx)(X,{item:e,onToggle:()=>o(l.map((t=>t.id===e.id?{...t,status:"completed"===t.status?"active":"completed"}:t))),onDelete:()=>o(l.filter((t=>t.id!==e.id)))},e.id)))})]})})}function K(){return(0,u.jsx)("section",{children:(0,u.jsxs)("div",{className:"container",children:[(0,u.jsx)("h2",{className:"text--center",children:(0,i.T)({id:"home.example.title",message:"Create user interfaces from widgets"})}),(0,u.jsx)("p",{className:"text--center description margin-bottom--lg margin-top--lg",children:(0,i.T)({id:"home.example.description",message:"LCUI lets you build user interfaces out of individual pieces called\n            widgets. Create your own LCUI widgets and combine them into entire\n            screens, pages, and apps."})}),(0,u.jsx)(F,{highlightMap:{0:{5:".task-item:eq(0)",6:".task-item:eq(0) .task-status",7:".task-item:eq(0) .task-name",8:".task-item:eq(0) .task-delete",9:".task-item:eq(0)",10:".task-item:eq(1)",11:".task-item:eq(1) .task-status",12:".task-item:eq(1) .task-name",13:".task-item:eq(1) .task-delete",14:".task-item:eq(1)",15:".task-item:eq(2)",16:".task-item:eq(2) .task-status",17:".task-item:eq(2) .task-name",18:".task-item:eq(2) .task-delete",19:".task-item:eq(2)",20:".task-item:eq(3)",21:".task-item:eq(3) .task-status",22:".task-item:eq(3) .task-name",23:".task-item:eq(3) .task-delete",24:".task-item:eq(3)"}},editorContent:(0,u.jsxs)(A,{children:[(0,u.jsx)(q,{value:"xml",label:"todolist.xml",className:"auto-highlight",default:!0,children:(0,u.jsx)(S.A,{language:"xml",showLineNumbers:!0,children:V})}),(0,u.jsx)(q,{value:"css",label:"todolist.css",children:(0,u.jsx)(S.A,{language:"css",showLineNumbers:!0,children:D})}),(0,u.jsx)(q,{value:"c",label:"todolist.c",children:(0,u.jsx)(S.A,{language:"c",showLineNumbers:!0,children:E})})]}),windowTitle:"Todo List",windowContent:(0,u.jsx)(u.Fragment,{children:[{id:1,name:"Download LCUI source code",status:"completed"},{id:2,name:"Build LCUI",status:"completed"},{id:3,name:"Read LCUI tutorials",status:"active"},{id:4,name:"Create my LCUI application",status:"active"}].map((e=>(0,u.jsx)(X,{item:e},e.id)))})})]})})}const H='#include <stdio.h>\n#include <LCUI.h>\n#include <LCUI/main.h>\n\ntypedef struct task_t {\n        unsigned id;\n        wchar_t *name;\n        const char *status;\n} task_t;\n\nstruct todolist_app_t {\n        unsigned id;\n        list_t tasks;\n} app = { 0 };\n\nui_widget_t *ui_task_item_create(task_t *task)\n{\n        char id[32] = { 0 };\n        ui_widget_t *item = ui_create_widget(NULL);\n        ui_widget_t *status = ui_create_widget(NULL);\n        ui_widget_t *del = ui_create_widget(NULL);\n        ui_widget_t *name = ui_create_widget("text");\n        snprintf(id, 32, "%u", task->id);\n        ui_text_set_content_w(name, task->name);\n        ui_widget_set_attribute(item, "data-id", id);\n        ui_widget_add_class(item, "task-item");\n        if (strcmp(task->status, "completed") == 0) {\n                ui_widget_add_class(item, "is-completed");\n        }\n        ui_widget_add_class(status, "task-status");\n        ui_widget_add_class(del, "task-delete");\n        ui_widget_append(item, status);\n        ui_widget_append(item, name);\n        ui_widget_append(item, del);\n        return item;\n}\n\nvoid ui_todolist_update_count(void)\n{\n        wchar_t text[32];\n        ui_widget_t *count = ui_get_widget("count");\n\n        swprintf(text, 32, app.tasks.length > 1 ? L"%u tasks" : L"%u task",\n                 app.tasks.length);\n        ui_text_set_content_w(count, text);\n}\n\nvoid update_filter_status(ui_widget_t *w, void *activeStatus)\n{\n        const char *status = ui_widget_get_attr_val(w, "data-value");\n        if (status && strcmp(status, activeStatus) == 0) {\n                ui_widget_add_class(w, "is-active");\n        } else {\n                ui_widget_remove_class(w, "is-active");\n        }\n}\n\nvoid ui_todolist_filter(const char *status)\n{\n        task_t *task;\n        list_node_t *node;\n        ui_widget_t *list = ui_get_widget("list");\n\n        ui_widget_empty(list);\n        for (list_each(node, &app.tasks)) {\n                task = node->data;\n                if (strcmp(status, "all") != 0 &&\n                    strcmp(task->status, status) != 0) {\n                        continue;\n                }\n                ui_widget_append(list, ui_task_item_create(task));\n        }\n        ui_widget_each(ui_get_widget("filters"), update_filter_status,\n                       (void *)status);\n        ui_todolist_update_count();\n}\n\nvoid ui_todolist_add(const wchar_t *name, const char *status)\n{\n        task_t *task = malloc(sizeof(task_t));\n\n        task->id = ++app.id;\n        task->name = wcsdup2(name);\n        task->status = status ? status : "active";\n        list_append(&app.tasks, task);\n        ui_widget_append(ui_get_widget("list"), ui_task_item_create(task));\n        ui_todolist_update_count();\n}\n\nvoid on_input_keydown(ui_widget_t *w, ui_event_t *e, void *arg)\n{\n        wchar_t name[256];\n\n        if (e->key.code == KEY_ENTER) {\n                ui_textedit_get_text_w(w, 0, 255, name);\n                ui_todolist_add(name, "active");\n                ui_textedit_clear_text(w);\n        }\n}\n\nvoid on_filter_click(ui_widget_t *w, ui_event_t *e, void *arg)\n{\n        const char *status = ui_widget_get_attr_val(e->target, "data-value");\n\n        if (status) {\n                ui_todolist_filter(status);\n        }\n}\n\nvoid on_task_list_click(ui_widget_t *w, ui_event_t *e, void *arg)\n{\n        const char *id_str;\n        unsigned id;\n        task_t *task;\n        list_node_t *node;\n        ui_widget_t *item = e->target->parent;\n\n        for (item = e->target; !ui_widget_has_class(item, "task-item");\n             item = item->parent)\n                ;\n        id_str = ui_widget_get_attr_val(item, "data-id");\n        if (!id_str || sscanf(id_str, "%u", &id) != 1) {\n                return;\n        }\n        if (ui_widget_has_class(e->target, "task-delete")) {\n                ui_widget_remove(item);\n                for (list_each(node, &app.tasks)) {\n                        task = node->data;\n                        if (task->id == id) {\n                                list_delete_node(&app.tasks, node);\n                                break;\n                        }\n                }\n                ui_todolist_update_count();\n                return;\n        }\n        if (!ui_widget_has_class(e->target, "task-status")) {\n                return;\n        }\n        for (list_each(node, &app.tasks)) {\n                task = node->data;\n                if (task->id != id) {\n                        continue;\n                }\n                if (strcmp(task->status, "completed") == 0) {\n                        task->status = "active";\n                        ui_widget_remove_class(item, "is-completed");\n                        break;\n                }\n                task->status = "completed";\n                ui_widget_add_class(item, "is-completed");\n                break;\n        }\n}\n\nvoid ui_todolist_init(void)\n{\n        ui_widget_on(ui_get_widget("input"), "keydown", on_input_keydown, NULL);\n        ui_widget_on(ui_get_widget("filters"), "click", on_filter_click, NULL);\n        ui_widget_on(ui_get_widget("list"), "click", on_task_list_click, NULL);\n        ui_todolist_filter("all");\n}\n\nint main(int argc, char **argv)\n{\n        ui_widget_t *pack;\n\n        lcui_init();\n        pack = ui_load_xml_file("todolist.xml");\n        if (!pack) {\n                return -1;\n        }\n        ui_root_append(pack);\n        ui_widget_unwrap(pack);\n        ui_widget_set_title(ui_root(), L"Todo list");\n        ui_todolist_init();\n        ui_todolist_add(L"Download LCUI source code", "completed");\n        ui_todolist_add(L"Build LCUI", "completed");\n        ui_todolist_add(L"Read LCUI tutorials", "active");\n        ui_todolist_add(L"Create my LCUI application", "active");\n        return lcui_main();\n}\n',J='<?xml version="1.0" encoding="UTF-8" ?>\n<lcui-app>\n  <resource type="text/css" src="todolist.css"/>\n  <ui>\n    <w class="app">\n      <w class="header">\n        <text class="title">Todo list</text>\n        <w class="tools">\n          <text id="count" class="count" />\n          <w id="filters" class="task-filters">\n            <text class="task-filter" data-value="all">All</text>\n            <text class="task-filter" data-value="active">Active</text>\n            <text class="task-filter" data-value="completed">Completed</text>\n          </w>\n        </w>\n      </w>\n      <textedit id="input" class="task-input" placeholder="Add a new task..." />\n      <w id="list" class="task-list" />\n    </w>\n  </ui>\n</lcui-app>\n',Z='root {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #adcdfc;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.app {\n  max-width: 400px;\n  width: 100%;\n  background-color: #fff;\n  border-radius: 16px;\n  box-shadow: 0 20px 80px rgba(0, 0, 0, 0.3);\n}\n\ntext {\n  font-size: 14px;\n  color: #455963;\n}\n\n.title {\n  font-size: 20px;\n  font-weight: 600;\n  padding: 20px 20px 6px 20px;\n}\n\n.tools {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 0 20px;\n}\n\n.count {\n  color: #8a9ca5;\n  display: inline-block;\n}\n\n.task-filters {\n  margin-left: auto;\n  display: inline-block;\n}\n\n.task-input {\n  color: #455963;\n  padding: 10px 20px;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-right-width: 0;\n  width: 100%;\n}\n\n.task-input:focus {\n  box-shadow: none;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-right-width: 0;\n}\n\n.task-filter {\n  padding: 3px 8px;\n  color: #8a9ca5;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.task-filter:hover {\n  background-color: rgba(121, 150, 165, 0.1);\n}\n\n.task-filter.is-active {\n  background-color: #7996a5;\n  color: #fff;\n}\n\n.task-item {\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n  border-top: 1px solid #eef0f5;\n}\n\n.task-item:last-child {\n  border-bottom: 0;\n}\n\n.task-item:hover {\n  background-color: #f6fbff;\n}\n\n.task-item.is-completed {\n  background-color: rgba(74, 206, 163, 0.1);\n}\n\n.task-status {\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n  border: 2px solid #bbbdc7;\n  border-radius: 9px;\n  background-color: #fff;\n  background-image: url("check.png");\n  background-size: 100%;\n  margin-right: 10px;\n  flex: none;\n  text-align: center;\n}\n\n.task-item.is-completed .task-status {\n  color: #fff;\n  background-color: #4acea3;\n  border-color: #38bb90;\n}\n\n.task-name {\n  flex: 1;\n}\n\n.task-delete {\n  width: 18px;\n  height: 18px;\n  display: none;\n  flex: none;\n  background-size: 100%;\n  background-image: url("delete.png");\n}\n\n.task-item:hover .task-delete {\n  display: block;\n}\n';function Q(){return(0,u.jsx)("section",{children:(0,u.jsxs)("div",{className:"container",children:[(0,u.jsx)("h2",{className:"text--center",children:(0,i.T)({id:"home.example2.title",message:"Add interactivity wherever you need it"})}),(0,u.jsx)("p",{className:"text--center description margin-bottom--lg margin-top--lg",children:(0,i.T)({id:"home.example2.description",message:"The widgets in LCUI are event driven. You can add event handlers to\n    widgets in response to interactions, and then make some content or\n    style changes in the event handlers."})}),(0,u.jsx)(F,{highlightMap:{0:{5:".app",6:".header",7:".title",8:".tools",9:".count",10:".task-filters",11:".task-filter:eq(0)",12:".task-filter:eq(1)",13:".task-filter:eq(2)",14:".task-filters",15:".tools",16:".header",17:".task-input",18:".task-list",19:".app"}},editorContent:(0,u.jsxs)(A,{children:[(0,u.jsx)(q,{value:"xml",label:"todolist.xml",className:"auto-highlight",default:!0,children:(0,u.jsx)(S.A,{language:"xml",showLineNumbers:!0,children:J})}),(0,u.jsx)(q,{value:"css",label:"todolist.css",children:(0,u.jsx)(S.A,{language:"css",showLineNumbers:!0,children:Z})}),(0,u.jsx)(q,{value:"c",label:"todolist.c",children:(0,u.jsx)(S.A,{language:"c",showLineNumbers:!0,children:H})})]}),windowTitle:"Todo list",windowContent:(0,u.jsx)(G,{})})]})})}const ee={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN",input:"input_wQOC",copy:"copy_AhLy"};function te(){return(0,u.jsx)("header",{className:(0,a.A)("hero",ee.heroBanner),children:(0,u.jsxs)("div",{className:"container text--center",children:[(0,u.jsx)("h1",{className:"hero__title",dangerouslySetInnerHTML:{__html:(0,i.T)({id:"home.title"})}}),(0,u.jsx)("p",{className:"hero__subtitle",children:(0,i.T)({id:"home.subtitle",message:"An open source UI toolkit for building cross-platform desktop apps."})}),(0,u.jsxs)("div",{className:ee.buttons,children:[(0,u.jsxs)(o.A,{className:"button button--primary button--lg",to:"/docs/guide/quick-start",children:[(0,i.T)({id:"home.get_started",message:"Get Started"}),(0,u.jsx)(r.A,{icon:l.dmS,className:"margin-left--sm"})]}),(0,u.jsx)(o.A,{className:"button button--secondary button--lg margin-left--sm",to:"/docs/guide/installation",children:(0,i.T)({id:"home.install",message:"Install"})})]})]})})}function ne(){return(0,u.jsxs)(d.A,{title:`${(0,i.T)({id:"site.title"})} - ${(0,i.T)({id:"site.tagline"})}`,description:(0,i.T)({id:"site.description"}),children:[(0,u.jsx)(te,{}),(0,u.jsxs)("main",{className:"homepage-main",children:[(0,u.jsx)(m,{}),(0,u.jsx)(K,{}),(0,u.jsx)(Q,{})]})]})}}}]);