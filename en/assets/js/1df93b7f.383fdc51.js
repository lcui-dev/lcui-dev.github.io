"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3237],{4929:(e,t,n)=>{n.r(t),n.d(t,{default:()=>se});var a=n(7294),s=n(6010),i=n(5999),l=n(9603),c=n(9417),o=n(4855),r=n(9960),d=n(7961);const m={features:"features_t9lD",feature:"feature_CLW0",card:"card_L8bV"};function u(){const e=[[(0,i.I)({id:"home.features.ui.title",message:"Portable UI library"}),(0,i.I)({id:"home.features.ui.description",message:"UI library has few dependencies and no system API dependencies."})],[(0,i.I)({id:"home.features.gl.title",message:"Small Graphics Library"}),(0,i.I)({id:"home.features.gl.description",message:"Provide basic graphics processing capabilities for UI rendering."})],[(0,i.I)({id:"home.features.plat.title",message:"Platform APIs"}),(0,i.I)({id:"home.features.plat.description",message:"Provide platform related APIs, such as window management, message loop, clipboard, etc."})],[(0,i.I)({id:"home.features.router.title",message:"Router"}),(0,i.I)({id:"home.features.router.description",message:"define routes, map them to widgets, and display the appropriate widget based on the URL."})],[(0,i.I)({id:"home.features.i18n.title",message:"I18n"}),(0,i.I)({id:"home.features.i18n.description",message:"Configure translated text in multiple languages and freely switch languages at runtime."})],[(0,i.I)({id:"home.features.window.title",message:"Window Mapping"}),(0,i.I)({id:"home.features.window.description",message:"Map widget to the system window so that its content can be synchronized to the window."})],[(0,i.I)({id:"home.features.ui_widgets.title",message:"Preset Widgets"}),(0,i.I)({id:"home.features.ui_widgets.description",message:"Text, TextEdit, Button, ScrollBar, etc."})],[(0,i.I)({id:"home.features.css.title",message:"CSS Support"}),(0,i.I)({id:"home.features.css.description",message:"Parse CSS, select styles, and calculate styles."})],[(0,i.I)({id:"home.features.xml.title",message:"XML Support"}),(0,i.I)({id:"home.features.xml.description",message:"Declare User Interface with XML."})]];return a.createElement("section",null,a.createElement("div",{className:"container"},a.createElement("h2",{className:"text--center"},(0,i.I)({id:"home.features.title",message:"What's in LCUI?"})),a.createElement("p",{className:"text--center description margin-bottom--lg"},(0,i.I)({id:"home.features.description",message:"The libraries you need to make the UI."})),a.createElement("div",{className:m.features},e.map((e=>{let[t,n]=e;return a.createElement("div",{key:t,className:m.feature},a.createElement("div",{className:m.card},a.createElement("h3",null,t),a.createElement("div",{className:"text--muted"},n)))})))))}var p=n(4184),g=n.n(p);function w(e){let{checked:t=!1,disabled:n=!1,children:s}=e;const[i,l]=(0,a.useState)(t);return a.createElement("div",{className:g()("checkbox",i&&"checked",n&&"disabled"),onClick:()=>{n||l(!i)}},a.createElement("div",{className:"checkbox-inner"},a.createElement("div",{className:"checkbox-inner-icon icon icon-check"})),a.createElement("span",{className:"checkbox-text"},s))}function _(e){let{checked:t=!1,disabled:n=!1,checkedIcon:s,uncheckedIcon:i,checkedText:l,uncheckedText:c,children:o}=e;const[r,d]=(0,a.useState)(t);return a.createElement("div",{className:g()("switch",r&&"checked",n&&"disabled"),onClick:()=>{n||d(!r)}},a.createElement("div",{className:"switch-inner"},a.createElement("div",{className:"switch-inner-bar"},a.createElement("div",{className:g()("switch-inner-on-block",s&&`icon icon-${s}`)},l),a.createElement("div",{className:"switch-inner-slider"}),a.createElement("div",{className:g()("switch-inner-off-block",i&&`icon icon-${i}`)},c))),a.createElement("span",{className:"switch-text"},o))}function k(e){let{checked:t=!1,disabled:n=!1,children:s,onChecked:i}=e;return a.createElement("div",{className:g()("radio",t&&"checked",n&&"disabled"),onClick:()=>{n||i()}},a.createElement("div",{className:"radio-inner"},a.createElement("div",{className:"radio-inner-icon"})),a.createElement("span",{className:"radio-text"},s))}var h=n(7462);function f(e){let{open:t,children:n,trigger:s}=e;const[i,l]=(0,a.useState)(t);return(0,a.useEffect)((()=>{"boolean"==typeof t&&l(t)}),[t]),a.createElement("div",{className:"dropdown"},a.cloneElement(s,{...s.props,onClick(){l(!i)}}),a.createElement("div",{className:g()("dropdown-menu",i&&"show")},n))}f.Item=function(e){let{className:t,disabled:n,...s}=e;return a.createElement("div",(0,h.Z)({},s,{className:g()("dropdown-item",t,n&&"disabled")}))},f.Divider=function(e){let{className:t,...n}=e;return a.createElement("div",(0,h.Z)({},n,{className:g()("dropdown-divider",t)}))},f.Header=function(e){let{className:t,...n}=e;return a.createElement("div",(0,h.Z)({},n,{className:g()("dropdown-header",t)}))};const E=f;function b(e){let{children:t,type:n}=e;const s={success:"check-circle",info:"information",warning:"alert-circle",error:"close-circle"}[n];return a.createElement("div",{className:g()("message-notice-wrapper",n&&`message-notice-${n}`)},a.createElement("div",{className:"message-notice"},s&&a.createElement("div",{className:g()("message-notice-icon icon",`icon-${s}`)}),a.createElement("div",{className:"message-notice-content"},t)))}const v={header:"header_gQLw",left:"left_SO1Y",widgets:"widgets_GLWM",widget:"widget_GBBG",widgetPreview:"widgetPreview_PK4g",dropdown:"dropdown_DhZq"};function x(){return a.createElement("div",null,a.createElement("div",{className:"mb-1"},a.createElement(w,null,"Checkbox")),a.createElement("div",{className:"mb-1"},a.createElement(w,{disabled:!0},"Disabled")),a.createElement("div",{className:"mb-1"},a.createElement(w,{disabled:!0,checked:!0},"Disabled Checked")))}function N(){const[e,t]=(0,a.useState)(0);return a.createElement("div",null,a.createElement("div",{className:"mb-1"},a.createElement(k,{checked:0==e,onChecked:()=>t(0)},"Option 1")),a.createElement("div",{className:"mb-1"},a.createElement(k,{checked:1==e,onChecked:()=>t(1)},"Option 2")),a.createElement("div",{className:"mb-1"},a.createElement(k,{disabled:!0},"Disabled")),a.createElement("div",{className:"mb-1"},a.createElement(k,{disabled:!0,checked:!0},"Disabled Checked")))}function I(){return a.createElement("div",null,a.createElement("div",{className:"mb-1"},a.createElement(_,{checked:!0},"Subscribe to weekly newsletter")),a.createElement("div",{className:"mb-1"},a.createElement(_,{checkedIcon:"check",uncheckedIcon:"close",checked:!0},"Icon")),a.createElement("div",{className:"mb-1"},a.createElement(_,{disabled:!0},"Disabled")),a.createElement("div",{className:"mb-1"},a.createElement(_,{disabled:!0,checked:!0},"Disabled Checked")))}function y(){return a.createElement("div",{className:v.dropdown},a.createElement(E,{open:!0,trigger:a.createElement("button",{className:"btn"},"Dropdown button")},a.createElement(E.Item,null,"Action"),a.createElement(E.Item,null,"Another action"),a.createElement(E.Item,{disabled:!0},"Disabled action"),a.createElement(E.Divider,null),a.createElement(E.Item,null,"Separated link")))}function C(){return a.createElement("div",null,a.createElement(b,{type:"success"},"Success message"),a.createElement(b,{type:"info"},"Info message"),a.createElement(b,{type:"warning"},"Warning message"),a.createElement(b,{type:"error"},"Error message"))}function L(){const[e,t]=(0,a.useState)(!1);return a.createElement(a.Fragment,null,a.createElement("button",{className:"btn",onClick:()=>t(!0)},"Launch demo modal"),e&&a.createElement("div",{className:"modal-backdrop"}),a.createElement("div",{className:g()("modal",e&&"show")},a.createElement("div",{className:"modal-dialog"},a.createElement("div",{className:"modal-content"},a.createElement("div",{className:"modal-header"},a.createElement("h5",{className:"modal-title"},"Modal Title"),a.createElement("button",{"data-dismiss":"modal",className:"close",onClick:()=>t(!1)},"\xd7")),a.createElement("div",{className:"modal-body"},a.createElement("p",null,"Modal body text goes here.")),a.createElement("div",{className:"modal-footer"},a.createElement("button",{className:"btn",onClick:()=>t(!1)},"Close"),a.createElement("button",{className:"btn btn-primary"},"Save changes"))))))}function U(){const e=[{preview:a.createElement(x,null),name:(0,i.I)({id:"home.widgets.checkbox.name",message:"Checkbox"}),description:(0,i.I)({id:"home.widgets.checkbox.description",message:"Make multiple selections in a set of options, or mark the status of an option."})},{preview:a.createElement(I,null),name:(0,i.I)({id:"home.widgets.switch.name",message:"Switch"}),description:(0,i.I)({id:"home.widgets.switch.description",message:"Represent the switching between two states or on-off state."})},{preview:a.createElement(N,null),name:(0,i.I)({id:"home.widgets.radio.name",message:"Radio"}),description:(0,i.I)({id:"home.widgets.radio.description",message:"Select one of a set of options."})},{preview:a.createElement(y,null),name:(0,i.I)({id:"home.widgets.dropdown.name",message:"Dropdown"}),description:(0,i.I)({id:"home.widgets.dropdown.description",message:"Toggle contextual overlays for displaying lists of links and more with the LCUI dropdown widget."})},{preview:a.createElement(C,null),name:(0,i.I)({id:"home.widgets.message.name",message:"Message"}),description:(0,i.I)({id:"home.widgets.message.description",message:"Display global messages as feedback in response to user operations."})},{preview:a.createElement(L,null),name:(0,i.I)({id:"home.widgets.modal.name",message:"Modal"}),description:(0,i.I)({id:"home.widgets.modal.description",message:"Use modal widget to add dialogs to your application for lightboxes, user notifications, or completely custom content."})}];return a.createElement("section",null,a.createElement("div",{className:"container"},a.createElement("h2",{className:"text--center"},(0,i.I)({id:"home.widgets.title",message:"Make the user interface more modern"})),a.createElement("p",{className:"text--center description"},(0,i.I)({id:"home.widgets.description",message:"We provide a modern widget library to meet your needs"})),a.createElement("ul",{className:v.widgets},e.map((e=>a.createElement("li",{key:e.name,className:v.widget},a.createElement("div",{className:v.widgetPreview},e.preview),a.createElement("h3",null,e.name),a.createElement("div",null,e.description))))),a.createElement("div",{className:"text--center margin-top--lg"},a.createElement("a",{className:"button button--outline button--primary",href:"https://github.com/lcui-dev/lc-design/tree/develop/docs/components",target:"_blank"},(0,i.I)({id:"home.widgets.btn_explore",message:"Explore UI widgets"}),a.createElement(l.G,{icon:c.gJF,className:"margin-left--sm"})))))}var S=n(4866),q=n(5162),T=n(614);const Z='#include <LCUI.h>\n#include <LCUI/main.h>\n\nint main(int argc, char **argv)\n{\n        ui_widget_t *pack;\n\n        lcui_init();\n        pack = ui_load_xml_file("todolist.xml");\n        if (!pack) {\n                return -1;\n        }\n        ui_root_append(pack);\n        ui_widget_unwrap(pack);\n        ui_widget_set_title(ui_root(), L"Todo list");\n        return lcui_main();\n}\n',D='<?xml version="1.0" encoding="UTF-8" ?>\n<lcui-app>\n  <resource type="text/css" src="todolist.css"/>\n  <ui>\n    <w class="task-item is-completed">\n      <w class="task-status" />\n      <text class="task-name">Download LCUI source code</text>\n      <w class="task-delete" />\n    </w>\n    <w class="task-item is-completed">\n      <w class="task-status" />\n      <text class="task-name">Build LCUI</text>\n      <w class="task-delete" />\n    </w>\n    <w class="task-item">\n      <w class="task-status" />\n      <text class="task-name">Read LCUI tutorials</text>\n      <w class="task-delete" />\n    </w>\n    <w class="task-item">\n      <w class="task-status" />\n      <text class="task-name">Create my LCUI application</text>\n      <w class="task-delete" />\n    </w>\n  </ui>\n</lcui-app>\n',A='.task-item:last-child {\n  border-bottom: 0;\n}\n\n.task-item:hover {\n  background-color: #f6fbff;\n}\n\n.task-item.is-completed {\n  background-color: rgba(74, 206, 163, 0.1);\n}\n\n.task-status {\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n  border: 2px solid #bbbdc7;\n  border-radius: 9px;\n  background-color: #fff;\n  background-image: url("check.png");\n  background-size: 100%;\n  margin-right: 10px;\n  flex: none;\n  text-align: center;\n}\n\n.task-item.is-completed .task-status {\n  color: #fff;\n  background-color: #4acea3;\n  border-color: #38bb90;\n}\n\n.task-name {\n  flex: 1;\n}\n\n.task-delete {\n  width: 18px;\n  height: 18px;\n  display: none;\n  flex: none;\n  background-size: 100%;\n  background-image: url("delete.png");\n}\n\n.task-item:hover .task-delete {\n  display: block;\n}\n';var M=n(4288);const P={window:"window_WmwH","window-header":"window-header_Fjqy","window-content":"window-content_miPl","window-buttons":"window-buttons_NWJo","window-button":"window-button_oDy6","window-close":"window-close_NXUe"};function B(e){let{className:t,title:n,children:i}=e;return a.createElement("div",{className:g()(t,P.window,"shadow--md")},a.createElement("div",{className:P["window-header"]},n,a.createElement("div",{className:P["window-buttons"]},a.createElement("div",{className:P["window-button"]},a.createElement(l.G,{icon:c.Kl4})),a.createElement("div",{className:P["window-button"]},a.createElement(l.G,{icon:M.pL1})),a.createElement("div",{className:(0,s.Z)(P["window-button"],P["window-close"])},a.createElement(l.G,{icon:c.YIN})))),a.createElement("div",{className:P["window-content"]},i))}const G={editor:"editor_rxp1"};function R(e){let{className:t,...n}=e;return a.createElement("div",(0,h.Z)({className:g()(t,G.editor)},n))}const W="pack_G02s",z="editor_F_9b",F="output__gTb",$="box_prTd";const j=function(e){let{highlightMap:t,editorContent:n,windowTitle:i,windowContent:l}=e;const c=(0,a.useRef)(),[o,r]=(0,a.useState)(!1),[d,m]=(0,a.useState)({});return(0,a.useEffect)((()=>{function e(e){return e&&Array.from(e.parentElement.children).findIndex((t=>t===e))}function n(n){let a;const s=c.current.querySelector(".example-preview");for(r(!1),a=n.target;a&&!a.classList.contains("token-line");a=a.parentElement);if(!c.current||!a)return;const i=e(a),l=e(function(e){for(let t=e;t;t=t.parentElement)if("tabpanel"===t.getAttribute("role"))return t;return null}(a)),o=t?.[l]?.[i+1],d=o?function(e,t){const n=t.split(" ").reduce(((e,t)=>{const[n,a]=t.split(":");if(a&&a.startsWith("eq(")){const t=a.substring(3,a.length-1);return e.querySelectorAll(n)[t]}return e.querySelector(n)}),e);return n!==e?n:null}(s,o):null;if(d){const e=1,t=s.getBoundingClientRect(),{left:n,top:a,width:i,height:l}=d.getBoundingClientRect();m({left:n-t.left-e,top:a-t.top-e,width:i,height:l}),r(!0)}}return c.current?.addEventListener("mousemove",n),()=>c.current?.removeEventListener("mousemove",n)}),[c]),a.createElement("div",{ref:c,className:W},a.createElement("div",{className:z},a.createElement(R,null,n)),a.createElement(B,{title:i,className:(0,s.Z)(F,"example-preview")},l,o&&a.createElement("div",{className:$,style:d})))},O={root:"root_jkPT"};function Y(e){let{onCreate:t}=e;const[n,s]=(0,a.useState)("");return a.createElement("input",{type:"text",className:"task-input",placeholder:"Add a new task...",value:n,onChange:e=>{let{target:t}=e;return s(t.value)},onKeyDown:e=>{"Enter"===e.key&&(t(n),s(""))}})}function K(e){let{item:t,onToggle:n,onDelete:s}=e;return a.createElement("div",{className:g()("task-item","completed"===t.status&&"is-completed")},a.createElement("div",{className:"task-status",onClick:n}),a.createElement("div",{className:"task-name"},t.name),a.createElement("div",{className:"task-delete",onClick:s}))}function H(e){let{className:t}=e;const n=(0,a.useRef)(0),[s,i]=(0,a.useState)("all"),[l,c]=(0,a.useState)([{id:n.current++,name:"Download LCUI source code",status:"completed"},{id:n.current++,name:"Build LCUI",status:"completed"},{id:n.current++,name:"Read LCUI tutorials",status:"active"},{id:n.current++,name:"Create my LCUI application",status:"active"}]);return a.createElement("div",{className:g()(O.root,t)},a.createElement("div",{className:"app"},a.createElement("div",{className:"header"},a.createElement("div",{className:"title"},"Todo list"),a.createElement("div",{className:"tools"},a.createElement("div",{className:"count"},l.length," ",l.length>1?"tasks":"task"),a.createElement("div",{className:"task-filters"},["all","active","completed"].map((e=>a.createElement("div",{key:e,className:g()("task-filter",e===s&&"is-active"),onClick:()=>i(e)},e)))))),a.createElement(Y,{onCreate:e=>{c([...l,{name:e,id:n.current++,status:"active"}])}}),a.createElement("div",{className:"task-list"},l.filter((e=>"all"===s||e.status===s)).map((e=>a.createElement(K,{key:e.id,item:e,onToggle:()=>c(l.map((t=>t.id===e.id?{...t,status:"completed"===t.status?"active":"completed"}:t))),onDelete:()=>c(l.filter((t=>t.id!==e.id)))}))))))}function X(){return a.createElement("section",null,a.createElement("div",{className:"container"},a.createElement("h2",{className:"text--center"},(0,i.I)({id:"home.example.title",message:"Create user interfaces from widgets"})),a.createElement("p",{className:"text--center description margin-bottom--lg margin-top--lg"},(0,i.I)({id:"home.example.description",message:"LCUI lets you build user interfaces out of individual pieces called\n            widgets. Create your own LCUI widgets and combine them into entire\n            screens, pages, and apps."})),a.createElement(j,{highlightMap:{0:{5:".task-item:eq(0)",6:".task-item:eq(0) .task-status",7:".task-item:eq(0) .task-name",8:".task-item:eq(0) .task-delete",9:".task-item:eq(0)",10:".task-item:eq(1)",11:".task-item:eq(1) .task-status",12:".task-item:eq(1) .task-name",13:".task-item:eq(1) .task-delete",14:".task-item:eq(1)",15:".task-item:eq(2)",16:".task-item:eq(2) .task-status",17:".task-item:eq(2) .task-name",18:".task-item:eq(2) .task-delete",19:".task-item:eq(2)",20:".task-item:eq(3)",21:".task-item:eq(3) .task-status",22:".task-item:eq(3) .task-name",23:".task-item:eq(3) .task-delete",24:".task-item:eq(3)"}},editorContent:a.createElement(S.Z,null,a.createElement(q.Z,{value:"xml",label:"todolist.xml",className:"auto-highlight",default:!0},a.createElement(T.Z,{language:"xml",showLineNumbers:!0},D)),a.createElement(q.Z,{value:"css",label:"todolist.css"},a.createElement(T.Z,{language:"css",showLineNumbers:!0},A)),a.createElement(q.Z,{value:"c",label:"todolist.c"},a.createElement(T.Z,{language:"c",showLineNumbers:!0},Z))),windowTitle:"Todo List",windowContent:a.createElement(a.Fragment,null,[{id:1,name:"Download LCUI source code",status:"completed"},{id:2,name:"Build LCUI",status:"completed"},{id:3,name:"Read LCUI tutorials",status:"active"},{id:4,name:"Create my LCUI application",status:"active"}].map((e=>a.createElement(K,{key:e.id,item:e}))))})))}const J='#include <stdio.h>\n#include <LCUI.h>\n#include <LCUI/main.h>\n\ntypedef struct task_t {\n        unsigned id;\n        wchar_t *name;\n        const char *status;\n} task_t;\n\nstruct todolist_app_t {\n        unsigned id;\n        list_t tasks;\n} app = { 0 };\n\nui_widget_t *ui_task_item_create(task_t *task)\n{\n        char id[32] = { 0 };\n        ui_widget_t *item = ui_create_widget(NULL);\n        ui_widget_t *status = ui_create_widget(NULL);\n        ui_widget_t *del = ui_create_widget(NULL);\n        ui_widget_t *name = ui_create_widget("text");\n        snprintf(id, 32, "%u", task->id);\n        ui_text_set_content_w(name, task->name);\n        ui_widget_set_attribute(item, "data-id", id);\n        ui_widget_add_class(item, "task-item");\n        if (strcmp(task->status, "completed") == 0) {\n                ui_widget_add_class(item, "is-completed");\n        }\n        ui_widget_add_class(status, "task-status");\n        ui_widget_add_class(del, "task-delete");\n        ui_widget_append(item, status);\n        ui_widget_append(item, name);\n        ui_widget_append(item, del);\n        return item;\n}\n\nvoid ui_todolist_update_count(void)\n{\n        wchar_t text[32];\n        ui_widget_t *count = ui_get_widget("count");\n\n        swprintf(text, 32, app.tasks.length > 1 ? L"%u tasks" : L"%u task",\n                 app.tasks.length);\n        ui_text_set_content_w(count, text);\n}\n\nvoid update_filter_status(ui_widget_t *w, void *activeStatus)\n{\n        const char *status = ui_widget_get_attr_val(w, "data-value");\n        if (status && strcmp(status, activeStatus) == 0) {\n                ui_widget_add_class(w, "is-active");\n        } else {\n                ui_widget_remove_class(w, "is-active");\n        }\n}\n\nvoid ui_todolist_filter(const char *status)\n{\n        task_t *task;\n        list_node_t *node;\n        ui_widget_t *list = ui_get_widget("list");\n\n        ui_widget_empty(list);\n        for (list_each(node, &app.tasks)) {\n                task = node->data;\n                if (strcmp(status, "all") != 0 &&\n                    strcmp(task->status, status) != 0) {\n                        continue;\n                }\n                ui_widget_append(list, ui_task_item_create(task));\n        }\n        ui_widget_each(ui_get_widget("filters"), update_filter_status,\n                       (void *)status);\n        ui_todolist_update_count();\n}\n\nvoid ui_todolist_add(const wchar_t *name, const char *status)\n{\n        task_t *task = malloc(sizeof(task_t));\n\n        task->id = ++app.id;\n        task->name = wcsdup2(name);\n        task->status = status ? status : "active";\n        list_append(&app.tasks, task);\n        ui_widget_append(ui_get_widget("list"), ui_task_item_create(task));\n        ui_todolist_update_count();\n}\n\nvoid on_input_keydown(ui_widget_t *w, ui_event_t *e, void *arg)\n{\n        wchar_t name[256];\n\n        if (e->key.code == KEY_ENTER) {\n                ui_textedit_get_text_w(w, 0, 255, name);\n                ui_todolist_add(name, "active");\n                ui_textedit_clear_text(w);\n        }\n}\n\nvoid on_filter_click(ui_widget_t *w, ui_event_t *e, void *arg)\n{\n        const char *status = ui_widget_get_attr_val(e->target, "data-value");\n\n        if (status) {\n                ui_todolist_filter(status);\n        }\n}\n\nvoid on_task_list_click(ui_widget_t *w, ui_event_t *e, void *arg)\n{\n        const char *id_str;\n        unsigned id;\n        task_t *task;\n        list_node_t *node;\n        ui_widget_t *item = e->target->parent;\n\n        for (item = e->target; !ui_widget_has_class(item, "task-item");\n             item = item->parent)\n                ;\n        id_str = ui_widget_get_attr_val(item, "data-id");\n        if (!id_str || sscanf(id_str, "%u", &id) != 1) {\n                return;\n        }\n        if (ui_widget_has_class(e->target, "task-delete")) {\n                ui_widget_remove(item);\n                for (list_each(node, &app.tasks)) {\n                        task = node->data;\n                        if (task->id == id) {\n                                list_delete_node(&app.tasks, node);\n                                break;\n                        }\n                }\n                ui_todolist_update_count();\n                return;\n        }\n        if (!ui_widget_has_class(e->target, "task-status")) {\n                return;\n        }\n        for (list_each(node, &app.tasks)) {\n                task = node->data;\n                if (task->id != id) {\n                        continue;\n                }\n                if (strcmp(task->status, "completed") == 0) {\n                        task->status = "active";\n                        ui_widget_remove_class(item, "is-completed");\n                        break;\n                }\n                task->status = "completed";\n                ui_widget_add_class(item, "is-completed");\n                break;\n        }\n}\n\nvoid ui_todolist_init(void)\n{\n        ui_widget_on(ui_get_widget("input"), "keydown", on_input_keydown, NULL);\n        ui_widget_on(ui_get_widget("filters"), "click", on_filter_click, NULL);\n        ui_widget_on(ui_get_widget("list"), "click", on_task_list_click, NULL);\n        ui_todolist_filter("all");\n}\n\nint main(int argc, char **argv)\n{\n        ui_widget_t *pack;\n\n        lcui_init();\n        pack = ui_load_xml_file("todolist.xml");\n        if (!pack) {\n                return -1;\n        }\n        ui_root_append(pack);\n        ui_widget_unwrap(pack);\n        ui_widget_set_title(ui_root(), L"Todo list");\n        ui_todolist_init();\n        ui_todolist_add(L"Download LCUI source code", "completed");\n        ui_todolist_add(L"Build LCUI", "completed");\n        ui_todolist_add(L"Read LCUI tutorials", "active");\n        ui_todolist_add(L"Create my LCUI application", "active");\n        return lcui_main();\n}\n',Q='<?xml version="1.0" encoding="UTF-8" ?>\n<lcui-app>\n  <resource type="text/css" src="todolist.css"/>\n  <ui>\n    <w class="app">\n      <w class="header">\n        <text class="title">Todo list</text>\n        <w class="tools">\n          <text id="count" class="count" />\n          <w id="filters" class="task-filters">\n            <text class="task-filter" data-value="all">All</text>\n            <text class="task-filter" data-value="active">Active</text>\n            <text class="task-filter" data-value="completed">Completed</text>\n          </w>\n        </w>\n      </w>\n      <textedit id="input" class="task-input" placeholder="Add a new task..." />\n      <w id="list" class="task-list" />\n    </w>\n  </ui>\n</lcui-app>\n',V='root {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #adcdfc;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.app {\n  max-width: 400px;\n  width: 100%;\n  background-color: #fff;\n  border-radius: 16px;\n  box-shadow: 0 20px 80px rgba(0, 0, 0, 0.3);\n}\n\ntext {\n  font-size: 14px;\n  color: #455963;\n}\n\n.title {\n  font-size: 20px;\n  font-weight: 600;\n  padding: 20px 20px 6px 20px;\n}\n\n.tools {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 0 20px;\n}\n\n.count {\n  color: #8a9ca5;\n  display: inline-block;\n}\n\n.task-filters {\n  margin-left: auto;\n  display: inline-block;\n}\n\n.task-input {\n  color: #455963;\n  padding: 10px 20px;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-right-width: 0;\n  width: 100%;\n}\n\n.task-input:focus {\n  box-shadow: none;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-right-width: 0;\n}\n\n.task-filter {\n  padding: 3px 8px;\n  color: #8a9ca5;\n  border-radius: 10px;\n  display: inline-block;\n}\n\n.task-filter:hover {\n  background-color: rgba(121, 150, 165, 0.1);\n}\n\n.task-filter.is-active {\n  background-color: #7996a5;\n  color: #fff;\n}\n\n.task-item {\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n  border-top: 1px solid #eef0f5;\n}\n\n.task-item:last-child {\n  border-bottom: 0;\n}\n\n.task-item:hover {\n  background-color: #f6fbff;\n}\n\n.task-item.is-completed {\n  background-color: rgba(74, 206, 163, 0.1);\n}\n\n.task-status {\n  width: 18px;\n  height: 18px;\n  cursor: pointer;\n  border: 2px solid #bbbdc7;\n  border-radius: 9px;\n  background-color: #fff;\n  background-image: url("check.png");\n  background-size: 100%;\n  margin-right: 10px;\n  flex: none;\n  text-align: center;\n}\n\n.task-item.is-completed .task-status {\n  color: #fff;\n  background-color: #4acea3;\n  border-color: #38bb90;\n}\n\n.task-name {\n  flex: 1;\n}\n\n.task-delete {\n  width: 18px;\n  height: 18px;\n  display: none;\n  flex: none;\n  background-size: 100%;\n  background-image: url("delete.png");\n}\n\n.task-item:hover .task-delete {\n  display: block;\n}\n';function ee(){return a.createElement("section",null,a.createElement("div",{className:"container"},a.createElement("h2",{className:"text--center"},(0,i.I)({id:"home.example2.title",message:"Add interactivity wherever you need it"})),a.createElement("p",{className:"text--center description margin-bottom--lg margin-top--lg"},(0,i.I)({id:"home.example2.description",message:"The widgets in LCUI are event driven. You can add event handlers to\n    widgets in response to interactions, and then make some content or\n    style changes in the event handlers."})),a.createElement(j,{highlightMap:{0:{5:".app",6:".header",7:".title",8:".tools",9:".count",10:".task-filters",11:".task-filter:eq(0)",12:".task-filter:eq(1)",13:".task-filter:eq(2)",14:".task-filters",15:".tools",16:".header",17:".task-input",18:".task-list",19:".app"}},editorContent:a.createElement(S.Z,null,a.createElement(q.Z,{value:"xml",label:"todolist.xml",className:"auto-highlight",default:!0},a.createElement(T.Z,{language:"xml",showLineNumbers:!0},Q)),a.createElement(q.Z,{value:"css",label:"todolist.css"},a.createElement(T.Z,{language:"css",showLineNumbers:!0},V)),a.createElement(q.Z,{value:"c",label:"todolist.c"},a.createElement(T.Z,{language:"c",showLineNumbers:!0},J))),windowTitle:"Todo list",windowContent:a.createElement(H,null)})))}const te={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN",input:"input_wQOC",copy:"copy_AhLy"};function ne(e){let{className:t,value:n}=e;const[i,r]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{const e=window.setTimeout((()=>{i&&r(!1)}),2e3);return()=>window.clearTimeout(e)}),[i]),a.createElement(o.CopyToClipboard,{text:n,onCopy:()=>r(!0)},a.createElement("div",{className:(0,s.Z)(te.input,t)},a.createElement("input",{type:"text",value:n,readOnly:!0}),a.createElement("div",{className:te.copy},i?a.createElement(l.G,{icon:c.LEp}):a.createElement(l.G,{icon:c.Yjj}))))}function ae(){return a.createElement("header",{className:(0,s.Z)("hero",te.heroBanner)},a.createElement("div",{className:"container text--center"},a.createElement("h1",{className:"hero__title",dangerouslySetInnerHTML:{__html:(0,i.I)({id:"home.title"})}}),a.createElement("p",{className:"hero__subtitle"},(0,i.I)({id:"home.subtitle",message:"An open source UI toolkit for building cross-platform desktop apps."})),a.createElement("div",{className:te.buttons},a.createElement(ne,{className:"margin-right--sm",value:"npx lcui create my-lcui-app"}),a.createElement(r.Z,{className:"button button--primary button--lg",to:"/docs/introduction"},(0,i.I)({id:"home.get_started",message:"Get Started"}),a.createElement(l.G,{icon:c.eFW,className:"margin-left--sm"})))))}function se(){return a.createElement(d.Z,{title:`${(0,i.I)({id:"site.title"})} - ${(0,i.I)({id:"site.tagline"})}`,description:(0,i.I)({id:"site.description"})},a.createElement(ae,null),a.createElement("main",{className:"homepage-main"},a.createElement(u,null),a.createElement(X,null),a.createElement(ee,null),a.createElement(U,null)))}}}]);